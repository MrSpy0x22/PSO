<!doctype html>
<html>

    <head>
        <meta charset="utf-8">
        <script type="text/javascript" src="js/plotly-latest.min.js"></script>

    </head>

    <body>


        <button id="st">START</button>
        <script>
            "use strict";

            const DIM = 2;
            // ------------------------
            const INTERIA = 0.5;
            const COGNITIVE = 0.5;
            const SOCIAL = 0.5;
            // ------------------------
            const ITERATIONS = 10;
            const PARTICLES = 5;
            const MIN = -2;
            const MAX = 2;

            function fitness(x , y) {
                return Math.pow(1.5 - x + x * y, 2) + Math.pow(2.25 - x + x * y * y, 2) + Math.pow(2.625 - x + x * y * y * y, 2);
            }  
            
            function updateVelocity(dim , vel , pos , best_l , best_g) {
                let ret = [];
                let r1 = Math.random();
                let r2 = Math.random();
                
                for (let i = 0 ; i < dim ; i++) {
                    let _1 = INTERIA * vel[i];
                    let _2 = r1 * COGNITIVE + (best_l - pos[i]);
                    let _3 = r2 * SOCIAL + (best_g - pos[i]);
                    let _r = _1 + _2 + _3;
                    
                    ret.push(_r);
                    //ret.push(_r > 1.0 ? 1.0 : _r < 0.0 ? 0.0 : _r);
                }

                return [...ret];
            }

            function updatePos(dim , new_vel , pos) {
                let ret = [];
                for (let i = 0 ; i < dim ; i++) {
                    ret.push(pos[i] + new_vel[i]);
                }
                console.log(`\t\tpos from ${pos} to ${ret}`);
                return [...ret];
            }

            function PSO() {

                let swarm = new Array(PARTICLES);
                let global_f = null;
                let global_p = [];

                // --- INIT ---------------------------

                for (let i = 0 ; i < PARTICLES ; i++) {

                    let area = MAX - MIN;
                    let x = Math.random() * area + MIN;
                    let y = Math.random() * area + MIN;
                    let f = fitness(x , y);
                    swarm[i] = {
                        vel: [ Math.random() , Math.random() ] ,
                        pos: [ x , y ] ,
                        fit: f ,
                        best_pos: [ x , y ] ,
                        best_fit: f
                    };
                    
                    console.log([...swarm[i].pos]);

                    // Najlepsze wartoÅ›ci
                    if (global_f == null || global_f > f) {
                        global_f = f;
                        global_p = [ x , y ];
                    }
                }

                // --- UPDATE ------------------------

                for (let e = 0 ; e < ITERATIONS ; e++) {
                    for (let i = 0 ; i < PARTICLES ; i++) {
                        
                        let new_v = updateVelocity(DIM , swarm[i].vel , swarm[i].pos , swarm[i].best_fit , global_f);
                        let new_p = updatePos(DIM , new_v , swarm[i].pos);

                        // Aktualizacja
                        swarm[i].vel = new_v;
                        swarm[i].pos = new_p;
                        swarm[i].fit = fitness(new_p[0] , new_p[1]);

                        // Sprawdzanie
                        if (swarm[i].fit > swarm[i].best_f) {
                            swarm[i].best_f = swarm[i].f;
                            swarm[i].best_pos = swarm[i].pos;
                        }

                        if (global_f > swarm[i].fit) {
                            global_f = swarm[i].fit;
                            global_p = swarm[i].pos;
                        }

                        console.log(`\t$${i} | fit: ${swarm[i].fit} at ${swarm[i].pos}`);
                        console.log(`\t$${i} | local: ${swarm[i].best_fit} at ${swarm[i].best_pos}`);
                    }
                    console.log(`#${e} | global: ${global_f} at ${global_p}`);
                }


            }
            document.getElementById("st").addEventListener("click" , () => PSO());

        </script>

    </body>

</html>